----------------------------------------------------
   ___  _____      __                                 
  / _ \/__   \    / _\ ___ __ _ _ __  _ __   ___ _ __ 
 / /_\/  / /\/____\ \ / __/ _` | '_ \| '_ \ / _ \ '__|
/ /_\\  / / |_____|\ \ (_| (_| | | | | | | |  __/ |   
\____/  \/        \__/\___\__,_|_| |_|_| |_|\___|_|   

Version: 0.2

Pedro Ribeiro  - CRACS & INESC-TEC, DCC/FCUP
pribeiro@dcc.fc.up.pt

David Aparício - CRACS & INESC-TEC, DCC/FCUP
daparicio@dcc.fc.up.pt 

Pedro Paredes  - CRACS & INESC-TEC, DCC/FCUP
pparedes@dcc.fc.up.pt
----------------------------------------------------

This software tool uses the g-trie data structure to enumerate subgraphs on large networks. The tool can be used to evaluate which subgraphs are network motifs and to perform graphlet comparison. This tool includes parallel implementations of g-trie based algorithms gtrieScanner and FaSE.

You can find more about it on the following url:
www.dcc.fc.up.pt/~daparicio/gtscanner

If you want to learn more about g-tries and related algorithms, please consult the following references:

* Pedro Ribeiro and Fernando M. A. Silva. G-Tries: a data structure for storing and finding subgraphs. In Data Mining and Knowledge Discovery, Vol. 28(2), pp. 337-377, Springer, March, 2014.

* David Aparício, Pedro Ribeiro and Fernando M. A. Silva. Extending the Applicability of Graphlets to Directed Networks. In IEEE/ACM Transactions on Computational Biology and Bioinformatics (TCBB) (to appear).

* David Aparício, Pedro Ribeiro and Fernando M. A. Silva. Parallel Subgraph Counting for Multicore Architectures. In Proceedings of the 12th IEEE International Symposium on Parallel and Distributed Processing with Architectures (ISPA), pp. 34-41, IEEE, Milan, Italy, August, 2014.

* David Aparício, Pedro Paredes and Pedro Ribeiro. A Scalable Parallel Approach for Subgraph Census Computation. In Proceedings of the 7th International Workshop on Multi-/Many-Core Computing Systems (MuCoCos), pp. 194-205, Springer LNCS Vol. 8806, Porto, Portugal, August, 2014.

----------------------------------------------------
License

This software is released under the "Artistic License 2.0". See the file "LICENSE" for more details.

This software uses the nauty program version 2.4 by Brendan McKay (http://cs.anu.edu.au/~bdm/nauty/). Therefore, nauty's license restrictions also apply to the usage of gtrieScanner. Nauty files are included in the "nauty" directory.

----------------------------------------------------
INSTALL

Just use 'make' (you nedd gcc and make tools instaled).
[Tested with Ubuntu 16.04 LTS and GCC 5.3.1)

If you have any trouble compiling, please contact the authors.

----------------------------------------------------
MANUAL

A limitation of this particular release is that you can only search for subgraphs of a specific size, that is, you cannot search for subgraphs of different sizes at the same time (but nothing forbids you to do more than one search).

Examples of usage

gtrieScanner -s 3 -m fase -g s420_st.txt
Compute the frequencies of subgraphs of size 3 in the undirected s420_st.txt network, using the FaSE algorithm

gtrieScanner -s 4 -m gtrie dir4.gt -g yeastInter_st.txt -d -th 4
Use 4 thread to compute the frequencies of subgraphs of size 4 in directed yeastInter_st.txt network, using the g-trie stored in undir4.gt. 

gtrieScanner -s 4 -m gtrie dir4.gt -g yeastInter_st.txt -d -t html -o yeast.html
Compute the frequencies of subgraphs of size 4 in directed yeastInter_st.txt network, using the g-trie stored in undir4.gt. Produce an HTML output to yeast.html file.

gtrieScanner -s 5 -m subgraphs undir5.str -g s420_st.txt -r 100 -oc dump.txt
Compute the motifs of size 5 in undirected s420_st.txt network, using the subgraphs listed in undir5.str and 100 random networks. Dump all occurrences of the subgbaphs in the original network 'dump.txt'.

gtrieScanner -s 5 -c dir5.str -o mygtrie5.gt -d [-or]
Produce the directed g-trie containing the subgraph list of dir5.str and output it to a pre-computed g-trie file 'mygtrie.gt'. The "-or" options produces a graphlet-trie (g-trie with orbit information).

gtrieScanner -s 3 -m gtrie gtries/or_mygtrie3.gt -g s420_st.txt -or -odir myorbits
Compute the frequencies of all orbits of graphlets of size 3 in the undirected s420_st.txt network. Store the obtained graphlet degree vector (GDD) in "myorbits" directory.

gtrieScanner -gda myorbits
Compute the GDA of all GDDs present in the "myorbits" directory.

Note that in all cases results are first ordered by z-score and then by frequency.

Command Line Syntax

You should call the program like this:

gtrieScanner -s <motif_size> [other_option]

Possible Options

 - [-s <int>] or [--size <int>]
   Subgraph/motif size to consider (mandatory)

 - [-g <file>] or [--graph <file>]
   File containing the graph (mandatory except when just creating a g-trie)

 - [-d] or [--directed]
   Graph is directed (default is undirected)

 - [-u] or [--undirected]
   Graph is undirected (default is undirected)

 - [-f <format>] of [--format <formatgt;]
   Format of the graph file. 'format' can be: (simple_weight)
   . "simple": list of pairs "a b", meaning an edge between a and b
   . "simple_weight": list of triples "a b c", meaning an edge between a and b with weight c (c is ignored)
   In all cases node labels are integers starting from 1. See above for example files.

 - [-m <method>] or [--method <method>]
   Method for searching for motifs. 'method' can be: (mandatory except when just creating a g-trie)
   . "esu": Use ESU on original graph
   . "fase": Use FaSE on original graph
   . "gtrie <file>": use the g-trie of 'file' on original network
   . "subgraphs <file>": insert the subgraph list (one subgraph per line, as exemplified above) 
                               on a g-trie and use it on the original network.
   In any case, for computing the census on the random networks, a g-trie will be created with the
   subgraphs that appear at least once.

 - [-c <file>] or [--create <file>]
   Create g-trie from 'file' with subgraph list (one subgraph per line, see above examples)
   G-Trie is written to the file indicated by '-o'

 - [-o <file>] or [--output <file>]
   Name for the file which will contain the results of the computation.

 - [-oc <file>] or [--occurrences <file>]
   Show/Dump all individual occurrences of subgraphs in the original network to 'file'

 - [-t <format>] or [--type <format>]
   Format of the results. 'format' can be:
   . "txt": text file
   . "html": html file, ready for being seen on a browser
     (need connection to internet for graph drawing)

 - [-r <int>] or [--random <int>]
   Number of random networks to generate. (default is 0)
   Leave at zero to just compute frequency.

 - [-rs <int>] or [--rseed <int>]
   Seed for random number generation (default is time())

 - [-re <int>] or [--rexchanges <int>]
   Number of exchanges per edge on randomization. (default is 3)

 - [-rt <int>] or [--tries <int>]
   Number of tries per edge on randomization. (default is 10)

 - [-th <int>] or [--threads <int>]
   Number of executing threads. (default is std::thread::hardware_concurrency())
   
 - [-or ] or [--orbits]
   Store orbit frequencies in the g-trie and output the GDD (by default in a new file in directory "orbits").
  
 - [-odir <directory>]
   Store orbit frequencies in this directory. Creates a new one if it does not exists (default is "orbits"). 
 
 - [-gda <directory>]
   Computes the GDA for all GDD files in the directory.
----------------------------------------------------
